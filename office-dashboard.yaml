title: Home
views:
  - title: New View
    path: new-view
    icon: mdi:chair-rolling
    theme: Google Dark Theme
    type: custom:grid-layout
    layout:
      grid-template-rows: auto
      grid-template-columns: 5% 19% 19% 19% 19% 19%
      grid-template-areas: |
        "s1 camera1 camera1 camera2 camera2 camera3"
        "s1 h1 h1 h1 h1 h2"
        "s1 camera4 camera4 camera5 camera5 heat"  
        "s1 c1 c2 c3 c3 heat"
        "s1 f1 f1 f1 f1 heat"
    cards:
      - name: Front Left
        type: custom:webrtc-camera
        url: unifi_camera_front_left
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera1
      - name: Front Left
        type: custom:webrtc-camera
        url: unifi_camera_front_right
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera2
      - name: Rear
        type: custom:webrtc-camera
        url: unifi_camera_rear
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera4
      - name: Side
        type: custom:webrtc-camera
        url: unifi_camera_side
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera3
      - name: Side
        type: custom:webrtc-camera
        url: unifi_camera_doorbell
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera5
      - type: vertical-stack
        cards:
          - type: horizontal-stack
            cards:
              - type: gauge
                entity: sensor.living_room_temperature
                name: Temperature
                theme: Google Dark Theme
                max: 30
                needle: true
                severity:
                  green: 0
                  yellow: 18
                  red: 24
          - type: thermostat
            entity: climate.living_room
            name: Heating
            theme: Google Dark Theme
            features:
              - style: icons
                hvac_modes:
                  - heat
                  - 'off'
                type: climate-hvac-modes
            show_current_as_primary: false
          - type: horizontal-stack
            cards:
              - type: thermostat
                entity: climate.office
                name: Office
                theme: Google Dark Theme
              - type: thermostat
                entity: climate.bedroom_2
                name: Bedroom
                theme: Google Dark Theme
              - type: thermostat
                entity: climate.bathroom
                name: Bathroom
                theme: Google Dark Theme
          - type: horizontal-stack
            cards:
              - type: thermostat
                entity: climate.lounge
                theme: Google Dark Theme
                name: Lounge
              - type: thermostat
                entity: climate.hallway
                name: Hallway
                theme: Google Dark Theme
              - type: thermostat
                entity: climate.conservatory
                name: Conservatory
                theme: Google Dark Theme
        view_layout:
          grid-area: heat
      - type: horizontal-stack
        cards:
          - type: custom:mushroom-template-card
            primary: Front
            secondary: |-
              {% if is_state("binary_sensor.front_door_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.front_door_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.front_door_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.front_door_entry_door
            multiline_secondary: false
            fill_container: false
            tap_action:
              action: more-info
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:mushroom-template-card
            primary: Kitchen
            secondary: |-
              {% if is_state("binary_sensor.kitchen_door_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.kitchen_door_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.kitchen_door_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.kitchen_door_entry_door
            tap_action:
              action: more-info
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:mushroom-template-card
            primary: Conservatory
            secondary: |-
              {% if is_state("binary_sensor.conservatory_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.conservatory_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.conservatory_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.conservatory_entry_door
            tap_action:
              action: more-info
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:mushroom-template-card
            primary: Shed (Front)
            secondary: |-
              {% if is_state("binary_sensor.shed_front_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.shed_front_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.shed_front_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.shed_front_entry_door
            tap_action:
              action: more-info
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:mushroom-template-card
            primary: Shed (Back)
            secondary: |-
              {% if is_state("binary_sensor.shed_back_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.shed_back_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.shed_back_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.shed_back_entry_door
            double_tap_action:
              action: none
            hold_action:
              action: none
            tap_action:
              action: more-info
        view_layout:
          grid-area: h1
      - type: entities
        entities:
          - entity: sensor.dcc_sourced_smart_electricity_meter_cost_today
            name: Cost (today)
          - entity: sensor.dcc_sourced_smart_electricity_meter_rate
            name: Rate
          - entity: sensor.dcc_sourced_smart_electricity_meter_standing_charge
            name: Standing charge
          - entity: sensor.dcc_sourced_smart_electricity_meter_usage_today
            name: Usage (today)
        title: Electricity meter
        state_color: false
        view_layout:
          grid-area: h1
      - type: entities
        entities:
          - entity: sensor.dcc_sourced_smart_gas_meter_cost_today
            name: Cost (today)
          - entity: sensor.dcc_sourced_smart_gas_meter_rate
            name: Rate
          - entity: sensor.dcc_sourced_smart_gas_meter_standing_charge
            name: Standing charge
          - entity: sensor.dcc_sourced_smart_gas_meter_usage_today
            name: Usage (today)
        view_layout:
          grid-area: h1
        title: DCC Sourced smart gas meter
  - title: Main
    path: main
    theme: Google Dark Theme
    type: custom:grid-layout
    layout:
      grid-template-rows: auto
      grid-template-columns: 28% 28% 28% 16%
      grid-template-areas: |
        "camera1 camera2 camera3 camera4"
        "h1 h1 h1 heat"
        "c1 c2 c3 heat"
        "f1 f1 f1 heat"
    cards:
      - type: vertical-stack
        cards:
          - type: horizontal-stack
            cards:
              - type: gauge
                entity: sensor.living_room_temperature
                name: Temperature
                theme: Google Dark Theme
                max: 30
                needle: true
                severity:
                  green: 0
                  yellow: 18
                  red: 24
          - type: thermostat
            entity: climate.living_room
            name: Heating
            theme: Google Dark Theme
          - type: horizontal-stack
            cards:
              - type: thermostat
                entity: climate.office
                name: Office
                theme: Google Dark Theme
              - type: thermostat
                entity: climate.bedroom_2
                name: Bedroom
                theme: Google Dark Theme
              - type: thermostat
                entity: climate.bathroom
                name: Bathroom
                theme: Google Dark Theme
          - type: horizontal-stack
            cards:
              - type: thermostat
                entity: climate.lounge
                theme: Google Dark Theme
                name: Lounge
              - type: thermostat
                entity: climate.hallway
                name: Hallway
                theme: Google Dark Theme
              - type: thermostat
                entity: climate.conservatory
                name: Conservatory
                theme: Google Dark Theme
        view_layout:
          grid-area: heat
      - square: false
        type: grid
        cards:
          - states:
              - arm_home
              - arm_away
            type: alarm-panel
            entity: alarm_control_panel.alarm_control_panel
            theme: Google Dark Theme
        columns: 1
        view_layout:
          grid-area: c1
      - type: horizontal-stack
        cards:
          - type: custom:mushroom-template-card
            primary: Front
            secondary: |-
              {% if is_state("binary_sensor.front_door_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.front_door_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.front_door_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.front_door_entry_door
            multiline_secondary: false
            fill_container: false
            tap_action:
              action: more-info
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:mushroom-template-card
            primary: Kitchen
            secondary: |-
              {% if is_state("binary_sensor.kitchen_door_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.kitchen_door_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.kitchen_door_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.kitchen_door_entry_door
            tap_action:
              action: more-info
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:mushroom-template-card
            primary: Conservatory
            secondary: |-
              {% if is_state("binary_sensor.conservatory_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.conservatory_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.conservatory_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.conservatory_entry_door
            tap_action:
              action: more-info
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:mushroom-template-card
            primary: Shed (Front)
            secondary: |-
              {% if is_state("binary_sensor.shed_front_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.shed_front_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.shed_front_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.shed_front_entry_door
            tap_action:
              action: more-info
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:mushroom-template-card
            primary: Shed (Back)
            secondary: |-
              {% if is_state("binary_sensor.shed_back_entry_door", "on") %}
                 Open
              {% else %}
                 Closed
              {% endif %}
            icon: |-
              {% if is_state("binary_sensor.shed_back_entry_door", "on") %}
                 mdi:door-open
              {% else %}
                 mdi:door-closed
              {% endif %}
            icon_color: |-
              {% if is_state("binary_sensor.shed_back_entry_door", "on") %}
                 red
              {% else %}
                 green
              {% endif %}
            entity: binary_sensor.shed_back_entry_door
            double_tap_action:
              action: none
            hold_action:
              action: none
            tap_action:
              action: more-info
          - type: custom:mushroom-chips-card
            chips:
              - type: entity
                entity: input_button.wake_asus
                tap_action:
                  action: toggle
                double_tap_action:
                  action: none
                use_entity_picture: false
                content_info: name
                icon_color: primary
        view_layout:
          grid-area: h1
      - name: Front Left
        type: custom:webrtc-camera
        url: unifi_camera_front_left
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera1
      - name: Front Left
        type: custom:webrtc-camera
        url: unifi_camera_front_right
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera2
      - name: Rear
        type: custom:webrtc-camera
        url: unifi_camera_rear
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera3
      - name: Side
        type: custom:webrtc-camera
        url: unifi_camera_side
        ui: true
        muted: true
        style:
          - '.screenshot {display: none}'
          - '.pictureinpicture {display: none}'
        view_layout:
          grid-area: camera4
      - type: custom:button-card
        entity: person.craig
        aspect_ratio: 1/1
        name: Craig
        show_entity_picture: true
        show_name: true
        hold_action:
          action: none
        state:
          - value: home
            styles:
              custom_fields:
                icon:
                  - border-color: '#77c66e'
          - value: not_home
            styles:
              card:
                - background-color: '#dedede'
              custom_fields:
                icon:
                  - border-color: '#EF4F1A'
          - value: Work
            styles:
              custom_fields:
                icon:
                  - border-color: deepskyblue
        styles:
          card:
            - background-color: white
            - border-radius: 5%
            - padding: 5%
            - color: gray
            - font-size: 10px
            - text-shadow: 0px 0px 0px black
            - text-transform: capitalize
            - justify-self: end
            - align-self: middle
          grid:
            - grid-template-areas: '"icon status" "n n" "battery proximity" "wifi ss" "sd sd"'
            - grid-template-columns: 2fr 1fr
            - grid-template-rows: 1fr min-content min-content min-content min-content
          name:
            - font-size: 15px
            - align-self: middle
            - justify-self: start
            - padding-bottom: 10px
          custom_fields:
            icon:
              - clip-path: circle()
              - width: 80%
              - pointer-events: none
              - display: grid
              - border: 5px solid
              - border-color: gray
              - border-radius: 500px
              - margin: 0 +10% 0 0
              - justify-self: end
              - opacity: 1
            status:
              - align-self: start
              - justify-self: end
              - color: gray
            proximity:
              - padding: 0.5em 0px
              - align-self: middle
              - justify-self: start
              - color: gray
            wifi:
              - padding: 0.5em 0px
              - align-self: middle
              - justify-self: start
              - color: gray
              - '--text-wifi-color-sensor': >-
                  [[[ if (states["sensor.craigs_iphone_connection_type_2"].state
                  == '<not connected>') return "#aaaaaa"; ]]]
            battery:
              - padding: 0.5em 0px
              - align-self: middle
              - justify-self: start
              - color: gray
              - '--text-color-sensor': >-
                  [[[ if (states["sensor.craigs_iphone_battery_level_2"].state <
                  50) return "#EF4F1A"; ]]]
        custom_fields:
          icon: >
            [[[ return entity === undefined ? null : `<img
            src="${states[entity.entity_id].attributes.entity_picture}"
            width="100%">`; ]]]
          status: |
            [[[
              if (states['person.craig'].state =='not_home') { 
              return `<ha-icon icon="mdi:home-export-outline"
                style="width: 20px; height: 20px; color: '#888888';">
                </ha-icon><span> Away</span>`;
              } 
              if (states['person.craig'].state =='home') { 
              return `<ha-icon 
                icon="mdi:home"
                style="width: 20px; height: 20px; color: 888888;">
                </ha-icon><span> ${entity.state}</span>`;
              } else {
              return `<ha-icon 
                icon="mdi:map-marker-radius"
                style="width: 20px; height: 20px; color: 888888;">
                </ha-icon><span> ${entity.state}</span>`;
              }
            ]]]
          wifi: |
            [[[
               if (states['sensor.craigs_iphone_connection_type_2'].state == 'not connected') { return `
                   <ha-icon icon="mdi:wifi" style="width: 20px; height: 20px; color: var(--text-wifi-color-sensor);"></ha-icon>
                   <span style="color: var(--text-wifi-color-sensor);">Disconnected</span>`;}
               else if (states['sensor.craigs_iphone_connection_type_2'].state == 'Cellular') { return `
                   <ha-icon icon="mdi:wifi" style="width: 20px; height: 20px; color: #ffffff;"></ha-icon>
                   <span style="color: var(--text-color-sensor);">${states['sensor.craigs_iphone_connection_type_2'].state}</span>`;}
               else { return `
                   <ha-icon icon="mdi:wifi" style="width: 20px; height: 20px; color: #ffff00;"></ha-icon>
                   <span style="color: var(--text-color-sensor);">${states['sensor.craigs_iphone_connection_type_2'].state} (${states['sensor.craigs_iphone_ssid_2'].state}</span>)`;
               }
            ]]]
          battery: |
            [[[
              if (states['sensor.craigs_iphone_battery_level_2'].state =='charging') { 
                return `<ha-icon
                icon="mdi:battery-charging"
                style="width: 20px; height: 20px; color: #888888;">
                </ha-icon> <span><span style="color: var(--text-color-sensor);">${states['sensor.craigs_iphone_battery_level_2'].state}% battery</span></span>`;
              } else {
                return `<ha-icon
                icon="mdi:battery"
                style="width: 20px; height: 20px; color: #888888;">
                </ha-icon> <span><span style="color: var(--text-color-sensor);">${states['sensor.craigs_iphone_battery_level_2'].state}% battery</span></span>`;
              }
            ]]]
          proximity: |
            [[[
              return `<ha-icon
                icon="mdi:map-marker-distance"
                style="width: 20px; height: 20px; color: #888888;">
                </ha-icon>  <span>\<span style="color: var(--text-color-sensor);">${states['sensor.home_craig_distance'].state} Kms</span></span>`
            ]]]
      - type: custom:button-card
        entity: person.caroline
        aspect_ratio: 1/1
        name: Caroline
        show_entity_picture: true
        show_name: true
        hold_action:
          action: none
        state:
          - value: home
            styles:
              custom_fields:
                icon:
                  - border-color: '#77c66e'
          - value: not_home
            styles:
              card:
                - background-color: '#dedede'
              custom_fields:
                icon:
                  - border-color: '#EF4F1A'
          - value: Work
            styles:
              custom_fields:
                icon:
                  - border-color: deepskyblue
        styles:
          card:
            - background-color: white
            - border-radius: 5%
            - padding: 5%
            - color: gray
            - font-size: 10px
            - text-shadow: 0px 0px 0px black
            - text-transform: capitalize
            - justify-self: end
            - align-self: middle
          grid:
            - grid-template-areas: '"icon status" "n n" "battery proximity" "wifi ss" "sd sd"'
            - grid-template-columns: 2fr 1fr
            - grid-template-rows: 1fr min-content min-content min-content min-content
          name:
            - font-size: 15px
            - align-self: middle
            - justify-self: start
            - padding-bottom: 10px
          custom_fields:
            icon:
              - clip-path: circle()
              - width: 80%
              - pointer-events: none
              - display: grid
              - border: 5px solid
              - border-color: gray
              - border-radius: 500px
              - margin: 0 +10% 0 0
              - justify-self: end
              - opacity: 1
            status:
              - align-self: start
              - justify-self: end
              - color: gray
            proximity:
              - padding: 0.5em 0px
              - align-self: middle
              - justify-self: start
              - color: gray
            wifi:
              - padding: 0.5em 0px
              - align-self: middle
              - justify-self: start
              - color: gray
              - '--text-wifi-color-sensor': >-
                  [[[ if
                  (states["sensor.carolines_iphone_connection_type"].state ==
                  '<not connected>') return "#aaaaaa"; ]]]
            battery:
              - padding: 0.5em 0px
              - align-self: middle
              - justify-self: start
              - color: gray
              - '--text-color-sensor': >-
                  [[[ if (states["sensor.carolines_iphone_battery_level"].state
                  < 50) return "#EF4F1A"; ]]]
        custom_fields:
          icon: >
            [[[ return entity === undefined ? null : `<img
            src="${states[entity.entity_id].attributes.entity_picture}"
            width="100%">`; ]]]
          status: |
            [[[
              if (states['person.caroline'].state =='not_home') { 
              return `<ha-icon icon="mdi:home-export-outline"
                style="width: 20px; height: 20px; color: '#888888';">
                </ha-icon><span> Away</span>`;
              } 
              if (states['person.caroline'].state =='home') { 
              return `<ha-icon 
                icon="mdi:home"
                style="width: 20px; height: 20px; color: 888888;">
                </ha-icon><span> ${entity.state}</span>`;
              } else {
              return `<ha-icon 
                icon="mdi:map-marker-radius"
                style="width: 20px; height: 20px; color: 888888;">
                </ha-icon><span> ${entity.state}</span>`;
              }
            ]]]
          wifi: |
            [[[
               if (states['sensor.carolines_iphone_connection_type'].state == 'not connected') { return `
                   <ha-icon icon="mdi:wifi" style="width: 20px; height: 20px; color: var(--text-wifi-color-sensor);"></ha-icon>
                   <span style="color: var(--text-wifi-color-sensor);">Disconnected</span>`;}
               else if (states['sensor.carolines_iphone_connection_type'].state == 'Cellular') { return `
                   <ha-icon icon="mdi:wifi" style="width: 20px; height: 20px; color: #ffffff;"></ha-icon>
                   <span style="color: var(--text-color-sensor);">${states['sensor.carolines_iphone_connection_type'].state}</span>`;}
               else { return `
                   <ha-icon icon="mdi:wifi" style="width: 20px; height: 20px; color: #ffff00;"></ha-icon>
                   <span style="color: var(--text-color-sensor);">${states['sensor.carolines_iphone_connection_type'].state} (${states['sensor.carolines_iphone_ssid_2'].state}</span>)`;
               }
            ]]]
          battery: |
            [[[
              if (states['sensor.carolines_iphone_battery_level'].state =='charging') { 
                return `<ha-icon
                icon="mdi:battery-charging"
                style="width: 20px; height: 20px; color: #888888;">
                </ha-icon> <span><span style="color: var(--text-color-sensor);">${states['sensor.carolines_iphone_battery_level'].state}% battery</span></span>`;
              } else {
                return `<ha-icon
                icon="mdi:battery"
                style="width: 20px; height: 20px; color: #888888;">
                </ha-icon> <span><span style="color: var(--text-color-sensor);">${states['sensor.carolines_iphone_battery_level'].state}% battery</span></span>`;
              }
            ]]]
          proximity: |
            [[[
              return `<ha-icon
                icon="mdi:map-marker-distance"
                style="width: 20px; height: 20px; color: #888888;">
                </ha-icon>  <span>\<span style="color: var(--text-color-sensor);">${states['sensor.home_caroline_distance'].state} Kms</span></span>`
            ]]]
